cmake_minimum_required (VERSION 3.13)

set(DRAGONIANLIB_ORT_LIB ${DRAGONIANLIB_LIB}OrtLib)

project (
	${DRAGONIANLIB_ORT_LIB}
	VERSION ${DRAGONIANLIB_VERSION_MAJOR}.${DRAGONIANLIB_VERSION_MINOR}.${DRAGONIANLIB_VERSION_PATCH}
	LANGUAGES ${DRAGONIANLIB_LANGUAGES}
)

set(DRAGONIANLIB_ORTLIB_SRC)
if(DRAGONIANLIB_ORT_SINGING_VOICE_CONVERSION)
	file(GLOB_RECURSE DRAGONIANLIB_ORTLIB_SVC_SRC
		${PROJECT_SOURCE_DIR}/SingingVoiceConversion/*.c
		${PROJECT_SOURCE_DIR}/SingingVoiceConversion/*.cpp
		${PROJECT_SOURCE_DIR}/SingingVoiceConversion/*.h
		${PROJECT_SOURCE_DIR}/SingingVoiceConversion/*.hpp
	)
	list(APPEND DRAGONIANLIB_ORTLIB_SRC ${DRAGONIANLIB_ORTLIB_SVC_SRC})
	message("	- Build Singing Voice Conversion")
endif()
if(DRAGONIANLIB_ORT_TEXT_TO_SPEECH)
	file(GLOB_RECURSE DRAGONIANLIB_ORTLIB_TTS_SRC
		${PROJECT_SOURCE_DIR}/TextToSpeech/*.c
		${PROJECT_SOURCE_DIR}/TextToSpeech/*.cpp
		${PROJECT_SOURCE_DIR}/TextToSpeech/*.h
		${PROJECT_SOURCE_DIR}/TextToSpeech/*.hpp
	)
	list(APPEND DRAGONIANLIB_ORTLIB_SRC ${DRAGONIANLIB_ORTLIB_TTS_SRC})
	message("	- Build Text To Speech")
endif()
if(DRAGONIANLIB_ORT_SUPER_RESOLUTION)
 	file(GLOB_RECURSE DRAGONIANLIB_ORTLIB_SR_SRC
		${PROJECT_SOURCE_DIR}/SuperResolution/*.c
		${PROJECT_SOURCE_DIR}/SuperResolution/*.cpp
		${PROJECT_SOURCE_DIR}/SuperResolution/*.h
		${PROJECT_SOURCE_DIR}/SuperResolution/*.hpp
	)
	list(APPEND DRAGONIANLIB_ORTLIB_SRC ${DRAGONIANLIB_ORTLIB_SR_SRC})
	message("	- Build Super Resolution")
endif()
if(DRAGONIANLIB_ORT_MUSIC_TRANSCRIPTION)
 	file(GLOB_RECURSE DRAGONIANLIB_ORTLIB_MT_SRC
		${PROJECT_SOURCE_DIR}/MusicTranscription/*.c
		${PROJECT_SOURCE_DIR}/MusicTranscription/*.cpp
		${PROJECT_SOURCE_DIR}/MusicTranscription/*.h
		${PROJECT_SOURCE_DIR}/MusicTranscription/*.hpp
	)
	list(APPEND DRAGONIANLIB_ORTLIB_SRC ${DRAGONIANLIB_ORTLIB_MT_SRC})
	message("	- Build Music Transcription")
endif()
if(DRAGONIANLIB_ORT_DEMIX)
 	file(GLOB_RECURSE DRAGONIANLIB_ORT_DEMIX_SRC
		${PROJECT_SOURCE_DIR}/Demix/*.c
		${PROJECT_SOURCE_DIR}/Demix/*.cpp
		${PROJECT_SOURCE_DIR}/Demix/*.h
		${PROJECT_SOURCE_DIR}/Demix/*.hpp
	)
	list(APPEND DRAGONIANLIB_ORTLIB_SRC ${DRAGONIANLIB_ORT_DEMIX_SRC})
	message("	- Build Demix")
endif()
if(DRAGONIANLIB_ORT_F0_EXTRACTOR)
 	file(GLOB_RECURSE DRAGONIANLIB_ORT_F0_EXTRACTOR_SRC
		${PROJECT_SOURCE_DIR}/F0Extractor/*.c
		${PROJECT_SOURCE_DIR}/F0Extractor/*.cpp
		${PROJECT_SOURCE_DIR}/F0Extractor/*.h
		${PROJECT_SOURCE_DIR}/F0Extractor/*.hpp
	)
	list(APPEND DRAGONIANLIB_ORTLIB_SRC ${DRAGONIANLIB_ORT_F0_EXTRACTOR_SRC})
	message("	- Build F0Extractor")
endif()
if(DRAGONIANLIB_ORT_CONTEXT)
 	file(GLOB_RECURSE DRAGONIANLIB_ORT_CONTEXT_SRC
		${PROJECT_SOURCE_DIR}/BertClap/*.c
		${PROJECT_SOURCE_DIR}/BertClap/*.cpp
		${PROJECT_SOURCE_DIR}/BertClap/*.h
		${PROJECT_SOURCE_DIR}/BertClap/*.hpp
	)
	list(APPEND DRAGONIANLIB_ORTLIB_SRC ${DRAGONIANLIB_ORT_CONTEXT_SRC})
	message("	- Build Bert & Clap")
endif()
if(DRAGONIANLIB_ORT_G2P)
 	file(GLOB_RECURSE DRAGONIANLIB_ORT_G2P_SRC
		${PROJECT_SOURCE_DIR}/G2P/*.c
		${PROJECT_SOURCE_DIR}/G2P/*.cpp
		${PROJECT_SOURCE_DIR}/G2P/*.h
		${PROJECT_SOURCE_DIR}/G2P/*.hpp
	)
	list(APPEND DRAGONIANLIB_ORTLIB_SRC ${DRAGONIANLIB_ORT_G2P_SRC})
	message("	- Build G2P")
endif()
if(DRAGONIANLIB_ORT_UNIT_ENCODER)
 	file(GLOB_RECURSE DRAGONIANLIB_ORT_UNIT_ENCODER_SRC
		${PROJECT_SOURCE_DIR}/UnitsEncoder/*.c
		${PROJECT_SOURCE_DIR}/UnitsEncoder/*.cpp
		${PROJECT_SOURCE_DIR}/UnitsEncoder/*.h
		${PROJECT_SOURCE_DIR}/UnitsEncoder/*.hpp
	)
	list(APPEND DRAGONIANLIB_ORTLIB_SRC ${DRAGONIANLIB_ORT_UNIT_ENCODER_SRC})
	message("	- Build UnitsEncoder")
endif()
if(DRAGONIANLIB_ORT_VOCODER)
 	file(GLOB_RECURSE DRAGONIANLIB_ORT_VOCODER_SRC
		${PROJECT_SOURCE_DIR}/Vocoder/*.c
		${PROJECT_SOURCE_DIR}/Vocoder/*.cpp
		${PROJECT_SOURCE_DIR}/Vocoder/*.h
		${PROJECT_SOURCE_DIR}/Vocoder/*.hpp
	)
	list(APPEND DRAGONIANLIB_ORTLIB_SRC ${DRAGONIANLIB_ORT_VOCODER_SRC})
	message("	- Build Vocoder")
endif()

if(DRAGONIANLIB_ONNXRUNTIME)
	file(GLOB_RECURSE DRAGONIANLIB_ORTLIB_UTIL_SRC
		${PROJECT_SOURCE_DIR}/Base/*.c
		${PROJECT_SOURCE_DIR}/Base/*.cpp
		${PROJECT_SOURCE_DIR}/Base/*.h
		${PROJECT_SOURCE_DIR}/Base/*.hpp
	)
	list(APPEND DRAGONIANLIB_ORTLIB_SRC ${DRAGONIANLIB_ORTLIB_UTIL_SRC})
endif()

if(DRAGONIANLIB_SHARED_LIBS)
	add_library(${DRAGONIANLIB_ORT_LIB} SHARED ${DRAGONIANLIB_ORTLIB_SRC})
else()
	add_library(${DRAGONIANLIB_ORT_LIB} STATIC ${DRAGONIANLIB_ORTLIB_SRC})
endif()

#Build Type
if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
	target_compile_options(${DRAGONIANLIB_ORT_LIB} PRIVATE ${DRAGONIANLIB_LIB_ARGUMENT_RELEASE})
elseif(${CMAKE_BUILD_TYPE} STREQUAL "RelWithDebInfo")
	target_compile_options(${DRAGONIANLIB_ORT_LIB} PRIVATE ${DRAGONIANLIB_LIB_ARGUMENT_RELEASE_DEB})
else()
	target_compile_options(${DRAGONIANLIB_ORT_LIB} PRIVATE ${DRAGONIANLIB_LIB_ARGUMENT_DEBUG})
endif()

target_include_directories(
	${DRAGONIANLIB_ORT_LIB} PRIVATE
	${DRAGONIANLIB_TENSORLIB_BASE_INCLUDE_DIRS}
	${DRAGONIANLIB_BASE_INCLUDE_DIRS}
	${ONNXRUNTIME_INCLUDE_DIRS}
)

target_link_libraries(
	${DRAGONIANLIB_ORT_LIB} PRIVATE
	${DRAGONIANLIB_LIB}
)

if(MSVC)
	if (POLICY CMP0141)
		cmake_policy(SET CMP0141 NEW)
		set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "$<IF:$<AND:$<C_COMPILER_ID:MSVC>,$<CXX_COMPILER_ID:MSVC>>,$<$<CONFIG:Debug,RelWithDebInfo>:EditAndContinue>,$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>>")
	endif()
endif()

# 导出目标
install(
	TARGETS ${DRAGONIANLIB_ORT_LIB}
	EXPORT ${DRAGONIANLIB_ORT_LIB}Targets
	ARCHIVE DESTINATION lib
	LIBRARY DESTINATION lib
	RUNTIME DESTINATION bin
)

# 配置和安装配置文件
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
	${CMAKE_CURRENT_BINARY_DIR}/${DRAGONIANLIB_ORT_LIB}ConfigVersion.cmake
	VERSION ${DRAGONIANLIB_VERSION_MAJOR}.${DRAGONIANLIB_VERSION_MINOR}.${DRAGONIANLIB_VERSION_PATCH}
	COMPATIBILITY AnyNewerVersion
)

configure_file(
	Config.cmake
	${CMAKE_CURRENT_BINARY_DIR}/${DRAGONIANLIB_ORT_LIB}Config.cmake
	COPYONLY
)

install(FILES
	${CMAKE_CURRENT_BINARY_DIR}/${DRAGONIANLIB_ORT_LIB}Config.cmake
	${CMAKE_CURRENT_BINARY_DIR}/${DRAGONIANLIB_ORT_LIB}ConfigVersion.cmake
	DESTINATION lib/cmake/${DRAGONIANLIB_ORT_LIB}
)
